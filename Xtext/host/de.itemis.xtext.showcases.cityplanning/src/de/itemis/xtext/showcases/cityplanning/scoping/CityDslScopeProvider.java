/*
 * generated by Xtext
 */
package de.itemis.xtext.showcases.cityplanning.scoping;

import java.util.Collection;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import de.itemis.xtext.showcases.cityplanning.cityDsl.C_Element;
import de.itemis.xtext.showcases.cityplanning.cityDsl.C_Object;
import de.itemis.xtext.showcases.cityplanning.cityDsl.C_Street;
import de.itemis.xtext.showcases.cityplanning.util.Helper;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class CityDslScopeProvider extends AbstractDeclarativeScopeProvider {
	IScope scope_C_Object(C_Element ctx, EReference ref) {
		List<C_Object> cObjects = Helper.getAllOfType(ctx, C_Object.class);
		
		if(ctx instanceof C_Object) {
			return scopeFor((C_Object) ctx, cObjects);
		} else if(ctx instanceof C_Street) {
			return scopeFor((C_Street) ctx, cObjects);
		}
		
		return null;
	}

	private IScope scopeFor(C_Street ctx, List<C_Object> cObjects) {
		List<C_Object> children = EcoreUtil2.getAllContentsOfType(ctx, C_Object.class);
		
		cObjects.removeAll(children);
		
		return Scopes.scopeFor(cObjects);
	}
	
	private IScope scopeFor(C_Object ctx, Collection<C_Object> cObjects) {
		cObjects.remove(ctx);
		
		return Scopes.scopeFor(cObjects);
	}
}
